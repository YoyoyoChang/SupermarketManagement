@using UseCases;
@using UseCases.UserCaseInterfaces;

@inject IViewCategoriesUseCase ViewCategoriesUseCase
@inject IViewProductByCategoryId ViewProductByCategoryId
@inject IViewCategoriesUseCase ViewCategoriesUseCase

<div class="form-group">
    <label for="category">Category</label>
    <select id="category" @bind="SelectedCategoryId" class="form-control">
        <option selected></option>
        @foreach (var category in _categories)
        {
            <option value="@category.Id">@category.Name</option>
        }
    </select>
</div>
@if(_productsInCategory != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Name</th>
                <th>Quantity Left</th>
            </tr>
        </thead>
        <tbody>
            @foreach(var prod in _productsInCategory)
                {
                    <tr>
                        <td>@prod.Name</td>
                        <td>@prod.Quantity</td>
                    </tr>
                }
        </tbody>
    </table>
}

@code {
    private IEnumerable<Product> _productsInCategory;
    private int _selectedCategoryId;
    private int SelectedCategoryId
    {
        get { return _selectedCategoryId; }
        set
        {
            _selectedCategoryId = value;
            _productsInCategory = ViewProductByCategoryId.Execute(_selectedCategoryId);
            StateHasChanged();
        }
    }
    private IEnumerable<Category> _categories;
    protected override void OnInitialized()
    {
        base.OnInitialized();
        _categories = ViewCategoriesUseCase.Execute();
    }
}

