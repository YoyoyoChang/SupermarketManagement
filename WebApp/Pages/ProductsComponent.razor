@page "/products"
@inject UseCases.UserCaseInterfaces.IViewProductsUseCase ViewProductsUseCase
@inject UseCases.UserCaseInterfaces.IGetCategoryByIdUseCase GetCategoryByIdUseCase
@inject NavigationManager NavigationManager

<h3>Products</h3>
<br/>

@if(_products != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Product Category</th>
                <th>Product Name</th>
                <th>Price</th>
                <th>Quantity</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach(var product in _products)
            {
                 <tr>
                    <td>@GetCategoryByIdUseCase.Execute(product.CategoryId.Value)?.Name</td>
                    <td>@product.Name</td>
                    <td>@(Math.Round(product.Price.Value, 2))</td>
                    <td>@product.Quantity</td>
                    <td><button type="button" class="btn btn-link" @onclick="() => EditProduct(product)">Edit</button></td>
                </tr>   
            }
        </tbody>
    </table>
}
<br/>
<button type="button" @onclick="OnClickAddProduct" class="btn btn-primary">Add Product</button>
@code {
    private List<Product> _products;

    protected override void OnInitialized()
    {
        base.OnInitialized();
        _products = ViewProductsUseCase.Execute().ToList();
    }

    private void OnClickAddProduct()
    {
        NavigationManager.NavigateTo("/addproduct");
    }

    private void EditProduct(Product product)
    {
        NavigationManager.NavigateTo($"/editProduct/{product.Id}");
    }
}
